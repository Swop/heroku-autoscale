{"name":"Heroku-autoscale","tagline":"An autoscaling python script for Heroku","body":"# heroku-autoscale\r\n\r\n\r\n## An autoscaling python script for Heroku\r\nThis python daemon use [Heroku official python API](https://github.com/heroku/heroku.py) and [Pingdom API](http://pingdom.com/services/api/) to automatically scale your Heroku app depending on the dyno's load.\r\n\r\n**You first need to install Heroku API before playing with this script.**\r\n\r\n---\r\n### First: Install heroku API\r\nFollow the instructions from the [Heroku official python API GitHub page](https://github.com/heroku/heroku.py) to install Heroku library.\r\n\r\nThe idea is to use Python's PIP to enable the lib in the whole system.\r\n\r\n---\r\n### Then: Configuring & using heroku-autoscale\r\nHeroku-autoscale was created as a standalone daemon. It just scale your app automatically, depending on the parameters you set and the performance of your app facing the traffic.\r\n\r\n#### Edit your config.ini file\r\nThe daemon will autoscale your app depending on some parameters you can tweak in a `config.ini` file (you can copy the sample file `config.sample.ini` and fill it with your parameters) :\r\n\r\n\t[HEROKU_INFOS]\r\n\tapi_key: MY_HEROKU_API_KEY\r\n\tapp_name: MY_APP_NAME\r\n\t\r\n\t[PINGDOM_INFOS]\r\n\tapi_key: MY_PINGDOM_API_KEY\r\n\tlogin: MY_PINGDOM_LOGIN\r\n\tpassword: MY_PINGDOM_PASSWORD\r\n\tcheck_id: MY_PINGDOM_CHECK_ID\r\n\t\r\n\t[AUTOSCALE_SETTINGS]\r\n\tmin_dynos: 1\r\n\tmax_dynos: 10\r\n\tresponse_time_low: 500\r\n\tresponse_time_high: 2000\r\n\tcheck_frequency: 5\r\n\tpingdom_check_period: 30\r\n\tresponse_time_trend_low: 0.5\r\n\tresponse_time_trend_high: 0.5\r\n\tplot: False\r\n\tgraphs_folder: /tmp\r\n\tdebug: False\r\n\r\n**Heroku parameters:**\r\n\r\n* `api_key`: Your Heroku API key\r\n* `app_name`: The name of the Heroku application you want to auto-scale\r\n\r\n**Pingdom parameters:**\r\n\r\n* `api_key`: Your Pingdom API key\r\n* `login`: Your Pingdom login (aka your email)\r\n* `password`: Your Pingdom password\r\n* `check_id`: The ID of the Pingdom check which monitor your application\r\n\r\n**Autoscale parameters:**\r\n\r\n* `min_dynos`: The autoscale app will not scale down the Heroku app under that number of dynos\r\n* `man_dynos`: The autoscale app will not scale up the Heroku app over that number of dynos\r\n* `response_time_low`: If the measured response time is below this number, the Heroku app will be scaled up\r\n* `response_time_high`: If the measured response time is over this number, the Heroku app will be scaled down\r\n* `check_frequency`: The check frequency\r\n* `pingdom_check_period`: The period of time you want to use from Pingdom website\r\n* `response_time_trend_low`: If the measured response time is between the `response_time_low` and the `response_time_high` bounds, the app will loose a dyno if the the coeficent of the linear regression model is under this value\r\n* `response_time_trend_high`: If the measured response time is between the `response_time_low` and the `response_time_high` bounds, the app will gain a dyno if the the coeficent of the linear regression model is over this value\r\n* `plot`: If enabled, each autoscale step will plot a graph with the response times, the average response time, the response time bounds and the linear regression model of the scatter graph\r\n* `graphs_folder`: The destination of the plotted graphs\r\n* `debug`: The Heroku app will not be scaleid but the scaling decisions will be made and logged (and eventually the graphs will be plotted). You must have installed `python-gnuplot` to use this feature\r\n\r\n#### *Optional* - Edit and install the daemon init.d script\r\nThis script was designed to be used as a daemon. You must want to have an `init.d` script to manage the daemon.\r\n\r\nAn `init.d` script had allready been written for you: `heroku-autoscale`\r\n\r\nStart by editing this file and change the path of the daemon script:\r\n\r\n\t[...]\r\n\t# !! CHANGE THIS LINE WITH YOUR REAL DEAMON'S PATH !!\r\n\tDAEMON_EXEC=\"/home/sylvain/Projets/Heroku/heroku-autoscale/HerokuAutoscaleDaemon.py\"\r\n\t[...]\r\n\r\nAnd then, copy the script into the `init.d` folder:\r\n\r\n\troot# cp heroku-autoscale /etc/init.d\r\n---\r\n### Finally: Let's have some fun!\r\nLaunch heroku-autoscale, forget about manually scale your app!\r\n\r\n**If you have installed the init.d script:**\r\n\r\n\troot# /etc/init.d/heroku-autoscale start\r\n\r\n**Or if you wanna use the python script directly:**\r\n\r\n\troot# python HerokuAutoscaleDaemon.py\r\n\r\nYou can tweak some parameters, like the UID, GID, logfiles... by adding some args the the command. Type `python HerokuAutoscaleDaemon.py --help` to know how to use it.\r\n\r\n---\r\n**Just don't forget to monitor your website…** Even if I do my best to make this script working, you should keep an eye on the performance of your app, and take control if needed before your app crash due to an auto-scaling error…\r\n\r\n---\r\nHave fun!\r\n\r\n[**Swop**](https://github.com/Swop)\r\n","google":"UA–31065066–1","note":"Don't delete this file! It's used internally to help with page regeneration."}